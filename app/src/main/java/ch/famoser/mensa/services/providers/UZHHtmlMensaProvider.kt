package ch.famoser.mensa.services.providers

import ch.famoser.mensa.models.Location
import ch.famoser.mensa.models.Mensa
import ch.famoser.mensa.models.Menu
import ch.famoser.mensa.services.IAssetService
import ch.famoser.mensa.services.ICacheService
import ch.famoser.mensa.services.ISerializationService
import org.jsoup.Jsoup
import org.jsoup.nodes.Element
import java.net.URI
import java.util.*
import kotlin.collections.ArrayList
import kotlin.collections.HashMap


class UZHHtmlMensaProvider(
    cacheService: ICacheService,
    assetService: IAssetService,
    serializationService: ISerializationService
) : AbstractMensaProvider(cacheService, assetService, serializationService) {

    companion object {
        const val CACHE_PROVIDER_PREFIX = "uzh"
    }

    private val mensaMap: MutableMap<Mensa, UzhMensa> = HashMap()

    fun getMenus(mensa: Mensa, date: Date, language: String, ignoreCache: Boolean): Boolean {
        val uzhMensa = mensaMap[mensa]
        if (uzhMensa === null)
            throw IllegalArgumentException("You may only pass objects generated by this provider.")

        return try {
            val normalizedLanguage = normalizeLanguage(language)
            val menus: List<Menu>? = loadMenus(uzhMensa, date, normalizedLanguage, ignoreCache)

            if (menus != null) {
                mensa.replaceMenus(menus)
                true
            } else {
                false
            }
        } catch (ex: Exception) {
            ex.printStackTrace()

            false
        }
    }


    private fun normalizeLanguage(language: String): String {
        return when (language) {
            "de" -> "de"
            else -> "en"
        }
    }

    private fun loadMenus(
        uzhMensa: UzhMensa,
        date: Date,
        language: String,
        ignoreCache: Boolean
    ): List<Menu>? {
        if (!ignoreCache) {
            val menus = tryGetMenusFromCache(CACHE_PROVIDER_PREFIX, uzhMensa.id, date, language)

            if (menus != null) {
                return menus
            }
        }

        val menusFromApi = loadMenusFromApi(uzhMensa, date, language)
        if (menusFromApi != null) {
            cacheMenus(CACHE_PROVIDER_PREFIX, uzhMensa.id, date, language, menusFromApi)
        }

        return menusFromApi
    }

    private fun loadMenusFromApi(
        uzhMensa: UzhMensa,
        date: Date,
        language: String
    ): List<Menu>? {
        val dayOfWeek = getDayOfWeekForApi(date) ?: return null
        val apiUrl = "https://www.mensa.uzh.ch/$language/menueplaene/${uzhMensa.apiUrlSlug}/$dayOfWeek.html"
        val htmlMenus = parseMensaHtml(apiUrl)

        return htmlMenus.map {
            val price = if (it.price != null) it.price!! else arrayOf()
            val title = if (it.title != null) it.title!! else ""
            Menu(title, normalizeText(it.description), price, it.allergenInfo)
        }
    }

    private fun getDayOfWeekForApi(date: Date): String? {
        val calender = Calendar.getInstance()
        calender.time = date

        return when (calender.get(Calendar.DAY_OF_WEEK)) {
            Calendar.MONDAY -> "montag"
            Calendar.TUESDAY -> "dienstag"
            Calendar.WEDNESDAY -> "mittwoch"
            Calendar.THURSDAY -> "donnerstag"
            Calendar.FRIDAY -> "freitag"
            else -> null
        }
    }

    private fun parseMensaHtml(url: String): List<HtmlMenu> {
        val doc = Jsoup.connect(url).get()
        val newslistDiv = doc.select("#main .mod-newslist .newslist-description").first()
        val contentDiv = newslistDiv.child(0)

        var currentMenu: HtmlMenu? = null
        val menus = ArrayList<HtmlMenu>()
        for (i in 0 until contentDiv.children().size) {
            val activeChild = contentDiv.child(i)
            val newMenu = tryCreateMenuFromHeader(activeChild)
            if (newMenu != null) {
                if (currentMenu != null) {
                    menus.add(currentMenu)
                }

                currentMenu = newMenu
            }

            tryFillContent(activeChild, currentMenu)
        }

        if (currentMenu != null) {
            menus.add(currentMenu)
        }

        return menus
    }

    private fun tryFillContent(
        activeChild: Element,
        htmlMenu: HtmlMenu?
    ) {
        if (activeChild.`is`("p") && htmlMenu != null) {
            var paragraphContent = activeChild.textNodes()
                .joinToString(separator = "\n", transform = { node -> node.wholeText.trim() })

            val allergyPrefixes = arrayOf("Allergikerinformationen:", "Allergy information:")
            val matchingPrefix = allergyPrefixes.firstOrNull { paragraphContent.startsWith(it) }
            if (matchingPrefix != null) {
                htmlMenu.allergenInfo = paragraphContent.substring(matchingPrefix.length).trim()
            } else {
                if (htmlMenu.description.isNotEmpty()) {
                    htmlMenu.description += "\n\n"
                }

                // normalize fleisch
                paragraphContent = paragraphContent.replace("Fleisch:", "\nFleisch:")
                paragraphContent = paragraphContent.replace("Fleisch :", "\nFleisch:")

                htmlMenu.description += paragraphContent.trim()
            }
        }
    }

    private fun tryCreateMenuFromHeader(activeChild: Element): HtmlMenu? {
        if (activeChild.`is`("h3")) {
            val headerText = activeChild.text()
            if (headerText.contains("|")) {
                val htmlMenu = HtmlMenu()

                //parse header of the form einfach gut | CHF 5.40 / 7.00 / 10.50
                val headerParts = headerText.split("|")
                htmlMenu.title = headerParts[0].trim()
                htmlMenu.price = headerParts[1]
                    .split("/")
                    .map { it.trim() }
                    .map {
                        if (it.startsWith("CHF")) {
                            it.substring(3).trim()
                        } else {
                            it
                        }
                    }
                    .toTypedArray()

                return htmlMenu
            }
        }

        return null
    }

    override fun getLocations(): List<Location> {
        val uzhLocations = super.readJsonAssetFileToListOfT("uzh/locations.json", UzhLocation::class.java)

        return uzhLocations.map { uzhLocation ->
            Location(uzhLocation.title, uzhLocation.mensas.map {
                val mensa = Mensa(
                    UUID.fromString(it.id),
                    it.title,
                    it.mealTime,
                    URI("http://www.mensa.uzh.ch/de/standorte/${it.infoUrlSlug}.html")
                )
                mensaMap[mensa] = it
                mensa
            })
        }
    }

    private class HtmlMenu {
        var title: String? = null
        var price: Array<String>? = null
        var description: String = ""
        var allergenInfo: String? = null
    }

    private data class UzhLocation(val title: String, val mensas: List<UzhMensa>)
    private data class UzhMensa(
        val id: String,
        val title: String,
        val mealTime: String,
        val apiUrlSlug: String,
        val infoUrlSlug: String
    )
}